<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>【MAC】使用技巧</title>
    <link href="/2021/12/18/MAC%E4%BD%BF%E7%94%A8/"/>
    <url>/2021/12/18/MAC%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="1-开发"><a href="#1-开发" class="headerlink" title="1. 开发"></a>1. 开发</h1><ol><li>iTerm2，非常好用的控制台程序</li><li>oh my zsh</li><li>git</li></ol><h1 id="2-使用"><a href="#2-使用" class="headerlink" title="2. 使用"></a>2. 使用</h1><ol><li>微信</li><li>音乐播放软件-酷狗/网易云等</li><li>谷歌浏览器 - 油猴助手（太多好用插件了）</li></ol><h1 id="3-一些链接分享"><a href="#3-一些链接分享" class="headerlink" title="3. 一些链接分享"></a>3. 一些链接分享</h1><h2 id="3-1-我开了vpn了，git网页能进去，但是为什么我的git-push-或者-git-clone-都特别慢"><a href="#3-1-我开了vpn了，git网页能进去，但是为什么我的git-push-或者-git-clone-都特别慢" class="headerlink" title="3.1 我开了vpn了，git网页能进去，但是为什么我的git push 或者 git clone 都特别慢"></a>3.1 我开了vpn了，git网页能进去，但是为什么我的git push 或者 git clone 都特别慢</h2><blockquote><p>原因：没有设置代理,为什么慢是因为你没有使用你的vpn，还是原来的网络环境<br>解决方法： vim ~/.gitconfig  检查一下是否设置了你vpn的代理<br>然后设置代理 </p></blockquote><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs tcl">设置代理方法即可解决(请自行查找你的vpn的<span class="hljs-keyword">http</span>代理端口)<br>git config --<span class="hljs-keyword">global</span> <span class="hljs-keyword">http</span>.proxy <span class="hljs-string">&quot;localhost:port&quot;</span><br></code></pre></td></tr></table></figure><p>怎么取消？</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tcl">git config --<span class="hljs-keyword">global</span> --<span class="hljs-keyword">unset</span> <span class="hljs-keyword">http</span>.proxy<br></code></pre></td></tr></table></figure><blockquote><p>参考 <a href="https://www.jianshu.com/p/471aeba64724">https://www.jianshu.com/p/471aeba64724</a></p></blockquote><h2 id="3-2-git-push-每次都要我输入用户名和密码"><a href="#3-2-git-push-每次都要我输入用户名和密码" class="headerlink" title="3.2 git push 每次都要我输入用户名和密码"></a>3.2 git push 每次都要我输入用户名和密码</h2><p>输入命令 <code>git config --global credential.helper store</code></p><p>之后再操作git输入一次用户名、密码，后续不需要再次输入了</p><p>push你的代码 (git push), 这时会让你输入用户名和密码, 这一步输入的用户名密码会被记住,下次再push代码时就不用输入用户名密码 ! 这一步会在用户目录下生成文件.git-credential记录用户名密码的信息。</p><blockquote><p>参考 <a href="https://blog.csdn.net/Forcezs/article/details/84136902">https://blog.csdn.net/Forcezs/article/details/84136902</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MAC</tag>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【面试题目】---redis</title>
    <link href="/2021/12/17/Redis/"/>
    <url>/2021/12/17/Redis/</url>
    
    <content type="html"><![CDATA[<h1 id="1-分布式锁"><a href="#1-分布式锁" class="headerlink" title="1. 分布式锁"></a>1. 分布式锁</h1><p>分布式锁是为了实现<code>强一致性</code>，例如</p><p><code>多个用户多个微服务去抢购物车100个限量商品，由于访问的是不同的机器，所以这个100可能是不准确的。</code></p><blockquote><p>有两个线程（分别叫T1,T2）做的都是同样的事情，拿到一个叫做A的资源，然后对其进行+1操作。由于线程之间是不会互相通信的，于是就有可能出现下面这种情况：<br>T1拿到A，读入内存，此时A值为T；<br>T2拿到A，读入内存，此时A值为T；<br>T1进行+1操作，此时A实际值为T+1；<br>T2进行+1操作，此时A的实际值仍然为T+1;</p></blockquote><h2 id="1-1-分布式锁应该具备哪些条件？"><a href="#1-1-分布式锁应该具备哪些条件？" class="headerlink" title="1.1 分布式锁应该具备哪些条件？"></a>1.1 分布式锁应该具备哪些条件？</h2><p>在分析分布式锁的三种实现方式之前，先了解一下分布式锁应该具备哪些条件：</p><ol><li>在分布式系统环境下，一个方法在<code>同一时间只能被一个机器的一个线程执行</code>；</li><li>高可用的获取锁与释放锁；</li><li>高性能的获取锁与释放锁；</li><li>具备可重入特性；</li><li><code>具备锁失效机制，防止死锁</code>；</li><li><code>具备非阻塞锁特性，即没有获取到锁将直接返回获取锁失败</code>。</li></ol><h2 id="1-2-实现分布式锁的三种方式？"><a href="#1-2-实现分布式锁的三种方式？" class="headerlink" title="1.2 实现分布式锁的三种方式？"></a>1.2 实现分布式锁的三种方式？</h2><blockquote><p>基于数据库实现分布式锁；<br>基于缓存（Redis等）实现分布式锁；<br>基于Zookeeper实现分布式锁；</p></blockquote><h3 id="1-2-1-基于数据库的锁机制"><a href="#1-2-1-基于数据库的锁机制" class="headerlink" title="1.2.1 基于数据库的锁机制"></a>1.2.1 基于数据库的锁机制</h3><p>基于数据库的实现方式的核心思想是：在数据库中创建一个表，表中包含方法名等字段，并在方法名字段上创建唯一索引，想要执行某个方法，就使用这个方法名向表中插入数据，成功插入则获取锁，执行完成后删除对应的行数据释放锁。</p><p><strong>(1) 创建一个表</strong></p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">DROP</span> TABLE <span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span> <span class="hljs-symbol">`method_lock`</span>;<br><span class="hljs-keyword">CREATE</span> TABLE <span class="hljs-symbol">`method_lock`</span> (<br>  <span class="hljs-symbol">`id`</span> int(<span class="hljs-number">11</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;主键&#x27;</span>,<br>  <span class="hljs-symbol">`method_name`</span> varchar(<span class="hljs-number">64</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> COMMENT <span class="hljs-string">&#x27;锁定的方法名&#x27;</span>,<br>  <span class="hljs-symbol">`desc`</span> varchar(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> COMMENT <span class="hljs-string">&#x27;备注信息&#x27;</span>,<br>  <span class="hljs-symbol">`update_time`</span> timestamp <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> DEFAULT CURRENT_TIMESTAMP <span class="hljs-keyword">ON</span> <span class="hljs-keyword">UPDATE</span> CURRENT_TIMESTAMP,<br>  <span class="hljs-keyword">PRIMARY</span> <span class="hljs-keyword">KEY</span> (<span class="hljs-symbol">`id`</span>),<br>  <span class="hljs-keyword">UNIQUE</span> <span class="hljs-keyword">KEY</span> <span class="hljs-symbol">`uidx_method_name`</span> (<span class="hljs-symbol">`method_name`</span>) <span class="hljs-keyword">USING</span> BTREE<br>) ENGINE=InnoDB AUTO_INCREMENT=<span class="hljs-number">3</span> DEFAULT CHARSET=utf8 COMMENT=<span class="hljs-string">&#x27;锁定中的方法&#x27;</span>;<br></code></pre></td></tr></table></figure><p><strong>（2）想要执行某个方法，就使用这个方法名向表中插入数据：</strong></p><p>INSERT INTO method_lock (method_name, desc) VALUES (‘methodName’, ‘测试的methodName’);<br>因为我们对method_name做了唯一性约束，这里如果有多个请求同时提交到数据库的话，数据库会保证只有一个操作可以成功，那么我们就可以认为操作成功的那个线程获得了该方法的锁，可以执行方法体内容。</p><p><strong>（3）成功插入则获取锁，执行完成后删除对应的行数据释放锁：</strong></p><p>delete from method_lock where method_name =’methodName’;</p><p>注意：这只是使用基于数据库的一种方法，使用数据库实现分布式锁还有很多其他的玩法！</p><p>使用基于数据库的这种实现方式很简单，但是对于分布式锁应该具备的条件来说，它有一些问题需要解决及优化：</p><p>1、因为是基于数据库实现的，数据库的可用性和性能将直接影响分布式锁的可用性及性能，所以，数据库需要双机部署、数据同步、主备切换；</p><p>2、不具备可重入的特性，因为同一个线程在释放锁之前，行数据一直存在，无法再次成功插入数据，所以，需要在表中新增一列，用于记录当前获取到锁的机器和线程信息，在再次获取锁的时候，先查询表中机器和线程信息是否和当前机器和线程相同，若相同则直接获取锁；</p><p>3、没有锁失效机制，因为有可能出现成功插入数据后，服务器宕机了，对应的数据没有被删除，当服务恢复后一直获取不到锁，所以，需要在表中新增一列，用于记录失效时间，并且需要有定时任务清除这些失效的数据；</p><p>4、不具备阻塞锁特性，获取不到锁直接返回失败，所以需要优化获取逻辑，循环多次去获取。</p><p>5、在实施的过程中会遇到各种不同的问题，为了解决这些问题，实现方式将会越来越复杂；依赖数据库需要一定的资源开销，性能问题需要考虑。</p><h3 id="1-2-2-基于redis的锁机制"><a href="#1-2-2-基于redis的锁机制" class="headerlink" title="1.2.2 基于redis的锁机制"></a>1.2.2 基于redis的锁机制</h3><p>1、选用Redis实现分布式锁原因：</p><p>（1）Redis有很高的性能；<br>（2）Redis命令对此支持较好，实现起来比较方便</p><p>2、使用命令介绍：</p><p>（1）SETNX</p><p>SETNX key val：当且仅当key不存在时，set一个key为val的字符串，返回1；若key存在，则什么都不做，返回0。</p><p>（2）expire</p><p>expire key timeout：为key设置一个超时时间，单位为second，超过这个时间锁会自动释放，避免死锁。</p><p>（3）delete</p><p>delete key：删除key</p><p>在使用Redis实现分布式锁的时候，主要就会使用到这三个命令。</p><p>3、实现思想：</p><p>（1）获取锁的时候，使用setnx加锁，并使用expire命令为锁添加一个超时时间，超过该时间则自动释放锁，锁的value值为一个随机生成的UUID，通过此在释放锁的时候进行判断。</p><p>（2）获取锁的时候还设置一个获取的超时时间，若超过这个时间则放弃获取锁。</p><p>（3）释放锁的时候，通过UUID判断是不是该锁，若是该锁，则执行delete进行锁释放。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#连接redis</span><br>redis_client = redis.Redis(host=<span class="hljs-string">&quot;localhost&quot;</span>,<br>                           port=<span class="hljs-number">6379</span>,<br>                           password=password,<br>                           db=<span class="hljs-number">10</span>)<br><br><span class="hljs-comment">#获取一个锁</span><br>lock_name：锁定名称<br>acquire_time: 客户端等待获取锁的时间<br>time_out: 锁的超时时间<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">acquire_lock</span>(<span class="hljs-params">lock_name, acquire_time=<span class="hljs-number">10</span>, time_out=<span class="hljs-number">10</span></span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;获取一个分布式锁&quot;&quot;&quot;</span><br>    identifier = <span class="hljs-built_in">str</span>(uuid.uuid4())<br>    end = time.time() + acquire_time<br>    lock = <span class="hljs-string">&quot;string:lock:&quot;</span> + lock_name<br>    <span class="hljs-keyword">while</span> time.time() &lt; end:<br>        <span class="hljs-keyword">if</span> redis_client.setnx(lock, identifier):<br>            <span class="hljs-comment"># 给锁设置超时时间, 防止进程崩溃导致其他进程无法获取锁</span><br>            redis_client.expire(lock, time_out)<br>            <span class="hljs-keyword">return</span> identifier<br>        <span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> redis_client.ttl(lock):<br>            redis_client.expire(lock, time_out)<br>        time.sleep(<span class="hljs-number">0.001</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><span class="hljs-comment">#释放一个锁</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">release_lock</span>(<span class="hljs-params">lock_name, identifier</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;通用的锁释放函数&quot;&quot;&quot;</span><br>    lock = <span class="hljs-string">&quot;string:lock:&quot;</span> + lock_name<br>    pip = redis_client.pipeline(<span class="hljs-literal">True</span>)<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-keyword">try</span>:<br>            pip.watch(lock)<br>            lock_value = redis_client.get(lock)<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> lock_value:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br>            <span class="hljs-keyword">if</span> lock_value.decode() == identifier:<br>                pip.multi()<br>                pip.delete(lock)<br>                pip.execute()<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>            pip.unwatch()<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">except</span> redis.excetions.WacthcError:<br>            <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><h3 id="1-2-3-基于ZooKeeper的锁机制"><a href="#1-2-3-基于ZooKeeper的锁机制" class="headerlink" title="1.2.3 基于ZooKeeper的锁机制"></a>1.2.3 基于ZooKeeper的锁机制</h3><p>ZooKeeper是一个为分布式应用提供一致性服务的开源组件，它内部是一个分层的文件系统目录树结构，规定同一个目录下只能有一个唯一文件名。基于ZooKeeper实现分布式锁的步骤如下：</p><p>（1）创建一个目录mylock；</p><p>（2）线程A想获取锁就在mylock目录下创建临时顺序节点；</p><p>（3）获取mylock目录下所有的子节点，然后获取比自己小的兄弟节点，如果不存在，则说明当前线程顺序号最小，获得锁；</p><p>（4）线程B获取所有节点，判断自己不是最小节点，设置监听比自己次小的节点；</p><p>（5）线程A处理完，删除自己的节点，线程B监听到变更事件，判断自己是不是最小的节点，如果是则获得锁。</p><p>这里推荐一个Apache的开源库Curator，它是一个ZooKeeper客户端，Curator提供的InterProcessMutex是分布式锁的实现，acquire方法用于获取锁，release方法用于释放锁。</p><p>优点：具备高可用、可重入、阻塞锁特性，可解决失效死锁问题。</p><p>缺点：因为需要频繁的创建和删除节点，性能上不如Redis方式。</p><h2 id="1-3-总结"><a href="#1-3-总结" class="headerlink" title="1.3 总结"></a>1.3 总结</h2><p>上面的三种实现方式，没有在所有场合都是完美的，所以，应根据不同的应用场景选择最适合的实现方式。</p><p>在分布式环境中，对资源进行上锁有时候是很重要的，比如抢购某一资源，这时候使用分布式锁就可以很好地控制资源。<br>当然，在具体使用中，还需要考虑很多因素，比如超时时间的选取，获取锁时间的选取对并发量都有很大的影响，上述实现的分布式锁也只是一种简单的实现，主要是一种思想。</p><p> 参考： </p><blockquote><p><a href="https://www.cnblogs.com/liuqingzheng/p/11080501.html">https://www.cnblogs.com/liuqingzheng/p/11080501.html</a></p></blockquote><h1 id="2-Redis双写一致性"><a href="#2-Redis双写一致性" class="headerlink" title="2. Redis双写一致性"></a>2. Redis双写一致性</h1><p>该问题等同于怎么确保redis和Mysql的数据怎么保证是一致的。</p><h2 id="2-1-缓存读取数据过程"><a href="#2-1-缓存读取数据过程" class="headerlink" title="2.1 缓存读取数据过程"></a>2.1 缓存读取数据过程</h2><ol><li>访问redis，如果有数据，直接读取redis的数据。</li><li>如果redis没有数据，访问mysql，把数据写到redis，访问给用户。</li></ol><h2 id="2-2-确保一致性的方法"><a href="#2-2-确保一致性的方法" class="headerlink" title="2.2 确保一致性的方法"></a>2.2 确保一致性的方法</h2><h3 id="2-2-1-先更新数据库，再更新缓存"><a href="#2-2-1-先更新数据库，再更新缓存" class="headerlink" title="2.2.1 先更新数据库，再更新缓存"></a>2.2.1 先更新数据库，再更新缓存</h3><p>第一种不适合用于开发场景中，因为：  </p><p>a. <code>有可能出现脏数据</code></p><p>假设同时有请求A和请求B进行更新操作，那么有可能出现：</p><ul><li>线程A更新了数据库</li><li>线程B更新了数据库</li><li>线程B更新了缓存</li><li>线程A更新了缓存</li></ul><p>这就出现请求A更新缓存应该比请求B更新缓存早才对，但是因为网络等原因，B却比A更早更新了缓存，这就导致了脏数据。</p><p>b.<code>浪费缓存资源</code></p><p>（1）如果你是一个写数据库场景比较多，而读数据场景比较少的业务需求，采用这种方案就会导致，数据压根还没读到，缓存就被频繁的更新，浪费性能。<br>（2）如果你写入数据库的值，并不是直接写入缓存的，而是要经过一系列复杂的计算再写入缓存。那么，每次写入数据库后，都再次计算写入缓存的值，无疑是浪费性能的。显然，删除缓存更为适合。</p><h3 id="2-2-2-先删缓存，再更新数据库"><a href="#2-2-2-先删缓存，再更新数据库" class="headerlink" title="2.2.2 先删缓存，再更新数据库"></a>2.2.2 先删缓存，再更新数据库</h3><p>该方案会导致不一致的原因是。同时有一个请求A进行更新操作，另一个请求B进行查询操作。那么会出现如下情形:</p><ol><li>请求A进行写操作，删除缓存</li><li>请求B查询发现缓存不存在</li><li>请求B去数据库查询得到旧值</li><li>请求B将旧值写入缓存</li><li>请求A将新值写入数据库</li></ol><p>上述情况就会导致不一致的情形出现。而且，如果不采用给缓存设置过期时间策略，该数据永远都是脏数据。</p><p>那么，如何解决呢？采用延时双删策略</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">/**</span><br><span class="hljs-comment">*解决方法的伪代码</span><br><span class="hljs-comment">*/</span><br>public void write(String key,Object data)&#123;<br><span class="hljs-comment">//1、先删除缓存</span><br>redis.del<span class="hljs-constructor">Key(<span class="hljs-params">key</span>)</span>;<br><span class="hljs-comment">//2、更新数据库，写入数据</span><br>db.update<span class="hljs-constructor">Data(<span class="hljs-params">data</span>)</span>;<br><span class="hljs-comment">//3、休眠1秒</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>sleep(<span class="hljs-number">1000</span>);<br><span class="hljs-comment">//4、再次删除缓存</span><br>redis.del<span class="hljs-constructor">Key(<span class="hljs-params">key</span>)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>为什么要删除两次呢？为什么要延时呢？延时多久？</strong></p><p>删两次是避免redis是脏数据。<br>延时是等最近一次向redis写数据结束。<br>延时多久看具体情况，例如1ms，1s之类的。</p><h3 id="2-2-3-先更新数据库，再删缓存（faceBook用的就是这个）"><a href="#2-2-3-先更新数据库，再删缓存（faceBook用的就是这个）" class="headerlink" title="2.2.3 先更新数据库，再删缓存（faceBook用的就是这个）"></a>2.2.3 先更新数据库，再删缓存（faceBook用的就是这个）</h3><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-comment">/**</span><br><span class="hljs-comment">*解决方法的伪代码</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> write(<span class="hljs-keyword">String</span> <span class="hljs-built_in">key</span>,<span class="hljs-keyword">Object</span> data)&#123;<br><span class="hljs-comment">//1、更新数据库，写入数据</span><br>db.updateData(data);<br><span class="hljs-comment">//2、删除缓存</span><br>redis.delKey(<span class="hljs-built_in">key</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>这种时候还会出现不一致情况吗？会的。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs css">假设这会有两个请求，一个请求<span class="hljs-selector-tag">A</span>做查询操作，一个请求<span class="hljs-selector-tag">B</span>做更新操作，那么会有如下情形产生<br><br><span class="hljs-number">1</span>）缓存刚好失效<br><span class="hljs-number">2</span>）请求<span class="hljs-selector-tag">A</span>查询数据库，得一个旧值<br><span class="hljs-number">3</span>）请求<span class="hljs-selector-tag">B</span>将新值写入数据库<br><span class="hljs-number">4</span>）请求<span class="hljs-selector-tag">B</span>删除缓存<br><span class="hljs-number">5</span>）请求<span class="hljs-selector-tag">A</span>将查到的旧值写入缓存<br><br>发生概率是多少？<br>发生上述情况有一个先天性条件，就是步骤（<span class="hljs-number">3</span>）的写数据库操作比步骤（<span class="hljs-number">2</span>）的读数据库操作耗时更短，才有可能使得步骤（<span class="hljs-number">4</span>）先于步骤（<span class="hljs-number">5</span>）。可是，大家想想，数据库的读操作的速度远快于写操作的（不然做读写分离干嘛，做读写分离的意义就是因为读操作比较快，耗资源少），因此步骤（<span class="hljs-number">3</span>）耗时比步骤（<span class="hljs-number">2</span>）更短，这一情形很难出现。<br><br>怎么解决？<br>首先，给缓存设有效时间是一种方案。其次，采用策略（<span class="hljs-number">2</span>）里给出的异步延时删除策略，保证读请求完成以后，再进行删除操作。<br><br></code></pre></td></tr></table></figure><h2 id="2-3-最佳方案"><a href="#2-3-最佳方案" class="headerlink" title="2.3 最佳方案"></a>2.3 最佳方案</h2><ol><li>缓存设置一个有效期<br>先做一个说明，从理论上来说，给缓存设置过期时间，是保证最终一致性的解决方案。这种方案下，我们可以对存入缓存的数据设置过期时间，所有的写操作以数据库为准，对缓存操作只是尽最大努力即可。也就是说如果数据库写成功，缓存更新失败，那么只要到达过期时间，则后面的读请求自然会从数据库中读取新值然后回填缓存。</li><li>使用补救队列<br>Redis里的数据总是不过期，但是有个背景更新任务（“定时执行的代码” 或者 “被队列驱动的代码）读取db，把最新的数据塞给Redis。这种做法将Redis看作是“存储”。访问者不知道背后的实际数据源，只知道Redis是唯一可以取的数据的地方。当实际数据源更新时，背景更新任务来将数据更新到Redis。这时还是会存在Redis和实际数据源不一致的问题。如果是定时任务，最长的不一致时长就是更新任务的执行间隔；如果是用类似于队列的方式来更新，那么不一致时间取决于队列产生和消费的延迟。常用的队列（或等价物）有Redis（怎么还是Redis），Kafka，AMQ，RMQ，binglog，log文件，阿里的canal等。</li></ol><blockquote><p>参考<br><a href="https://blog.csdn.net/qq_37493556/article/details/107667185">https://blog.csdn.net/qq_37493556/article/details/107667185</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>面试题目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
      <tag>面试题目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【面试题目】---数据库</title>
    <link href="/2021/12/17/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <url>/2021/12/17/%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>面试题目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试题目</tag>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【面试题目】---操作系统</title>
    <link href="/2021/12/17/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    <url>/2021/12/17/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>面试题目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试题目</tag>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【面试题目】---计算机网络</title>
    <link href="/2021/12/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    <url>/2021/12/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="一、从你输入www-baidu-com以后，一个完整的网络请求过程是什么？"><a href="#一、从你输入www-baidu-com以后，一个完整的网络请求过程是什么？" class="headerlink" title="一、从你输入www.baidu.com以后，一个完整的网络请求过程是什么？"></a>一、从你输入<a href="http://www.baidu.com以后，一个完整的网络请求过程是什么？">www.baidu.com以后，一个完整的网络请求过程是什么？</a></h1><ol><li>域名解析 DNS解析</li><li>TCP三次握手</li><li>TCP四次挥手</li><li>浏览器渲染 </li></ol><h1 id="二、网络的五层-七层模型？"><a href="#二、网络的五层-七层模型？" class="headerlink" title="二、网络的五层/七层模型？"></a>二、网络的五层/七层模型？</h1>]]></content>
    
    
    <categories>
      
      <category>面试题目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试题目</tag>
      
      <tag>计算机网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Tampermonkey</title>
    <link href="/2021/12/13/Tampermonkey/"/>
    <url>/2021/12/13/Tampermonkey/</url>
    
    <content type="html"><![CDATA[<h1 id="Tampermonkey-插件使用"><a href="#Tampermonkey-插件使用" class="headerlink" title="Tampermonkey 插件使用"></a>Tampermonkey 插件使用</h1><p>你是否还在看广告？无论是优酷、芒果TV、爱奇艺，每一集都得看一次广告<del>你是否还在因为没有会员然后看不到很多东西</del></p><p>本次分享一个插件<code>Tampermonkey</code>,就可以帮你解决这个问题~</p><h1 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h1><ol><li><p>选择谷歌浏览器上面<code>...</code>,选择<code>更多工具</code>，选择<code>扩展程序</code><br><img src="https://github.com/iszhangyongxin/pictures/blob/main/2021-12/%E6%89%A9%E5%B1%95%E7%A8%8B%E5%BA%8F.PNG?raw=true"></p></li><li><p>左上方,选择扩展程序，打开chorme网上商店（需要科学上网）<br><img src="https://github.com/iszhangyongxin/pictures/blob/main/2021-12/%E7%BD%91%E4%B8%8A%E5%BA%94%E7%94%A8%E5%95%86%E5%BA%97.PNG?raw=true"></p></li><li><p>搜索Tampermonkey，<code>点击</code>然后<code>添加到chorme</code><br><img src="https://github.com/iszhangyongxin/pictures/blob/main/2021-12/%E4%B8%8B%E8%BD%BD.PNG?raw=true"></p></li><li><p>在右上角，找到你刚才添加的插件，点击获取新脚本<br><img src="https://github.com/iszhangyongxin/pictures/blob/main/2021-12/%E8%8E%B7%E5%8F%96%E6%96%B0%E8%84%9A%E6%9C%AC.PNG?raw=true"></p></li><li><p>搜索视频vip，然后任意安装一个插件<br>   <img src="https://github.com/iszhangyongxin/pictures/blob/main/2021-12/%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B6.PNG?raw=true"></p></li></ol><h1 id="插件使用"><a href="#插件使用" class="headerlink" title="插件使用"></a>插件使用</h1><p>安装完成以后，看一下效果~</p><p><img src="https://github.com/iszhangyongxin/pictures/blob/main/2021-12/%E4%BD%BF%E7%94%A8.PNG?raw=true"></p><p><img src="https://github.com/iszhangyongxin/pictures/blob/main/2021-12/%E5%AE%8C%E6%88%90.PNG?raw=true"></p><p>以后看电视就不受vip限制啦~</p><h1 id="知网pdf格式"><a href="#知网pdf格式" class="headerlink" title="知网pdf格式"></a>知网pdf格式</h1><p>在插件中搜索<code>知网pdf</code>，以后看知网的文章就可以直接下载pdf啦!</p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>chorme</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Tom&#39;s book review</title>
    <link href="/2021/12/03/book-review/"/>
    <url>/2021/12/03/book-review/</url>
    
    <content type="html"><![CDATA[<h1 id="Tom’s-Book-Review"><a href="#Tom’s-Book-Review" class="headerlink" title="Tom’s Book Review"></a>Tom’s Book Review</h1><h2 id="《网络是怎么连接的》"><a href="#《网络是怎么连接的》" class="headerlink" title="《网络是怎么连接的》"></a>《网络是怎么连接的》</h2><h2 id="《基金投资指南》"><a href="#《基金投资指南》" class="headerlink" title="《基金投资指南》"></a>《基金投资指南》</h2>]]></content>
    
    
    
    <tags>
      
      <tag>Book</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Tom&#39;s paper review</title>
    <link href="/2021/12/03/paper-review/"/>
    <url>/2021/12/03/paper-review/</url>
    
    <content type="html"><![CDATA[<h1 id="Tom’s-Paper-Review"><a href="#Tom’s-Paper-Review" class="headerlink" title="Tom’s Paper Review"></a>Tom’s Paper Review</h1><h2 id="style-transfer"><a href="#style-transfer" class="headerlink" title="style transfer"></a>style transfer</h2><h2 id="数据集、用途"><a href="#数据集、用途" class="headerlink" title="数据集、用途"></a>数据集、用途</h2><h2 id="改进点"><a href="#改进点" class="headerlink" title="改进点"></a>改进点</h2><ol><li>多尺度特征融合<br>浅层特征和深层特征相融合<br><a href="https://zhuanlan.zhihu.com/p/74710464">https://zhuanlan.zhihu.com/p/74710464</a></li></ol><ol start="2"><li>残差网络 –&gt; 密集连接网络</li></ol><h2 id="改进点文章收集"><a href="#改进点文章收集" class="headerlink" title="改进点文章收集"></a>改进点文章收集</h2><ol><li><p>inception 和 ResNet 相结合 <a href="https://m.xzbu.com/8/view-15343830.htm">https://m.xzbu.com/8/view-15343830.htm</a></p></li><li></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>paper</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Tom&#39;s video review</title>
    <link href="/2021/12/03/video-review/"/>
    <url>/2021/12/03/video-review/</url>
    
    <content type="html"><![CDATA[<h1 id="Tom’s-Video-Review"><a href="#Tom’s-Video-Review" class="headerlink" title="Tom’s Video Review"></a>Tom’s Video Review</h1>]]></content>
    
    
    
    <tags>
      
      <tag>video</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>怎么创建自己的博客？</title>
    <link href="/2021/12/03/create-blog/"/>
    <url>/2021/12/03/create-blog/</url>
    
    <content type="html"><![CDATA[<h1 id="怎么创建自己的博客网站？"><a href="#怎么创建自己的博客网站？" class="headerlink" title="怎么创建自己的博客网站？"></a>怎么创建自己的博客网站？</h1><p>本教程主要是适合windows下系统的开发和维护。</p><h2 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h2><p>首先需要安装nodejs还有git</p><p>安装nodejs:<br><a href="https://www.cnblogs.com/liuqiyun/p/8133904.html">https://www.cnblogs.com/liuqiyun/p/8133904.html</a></p><p>下载安装git:<br><a href="https://blog.csdn.net/sanxd/article/details/82624127">https://blog.csdn.net/sanxd/article/details/82624127</a></p><p>Hexo下载安装：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">npm install hexo-<span class="hljs-keyword">cli</span> -g<br></code></pre></td></tr></table></figure><p>检查是否安装成功：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">&gt; node -v<br>v16<span class="hljs-number">.13</span><span class="hljs-number">.1</span><br><br>&gt; npm -v<br><span class="hljs-number">8.1</span><span class="hljs-number">.2</span><br><br>&gt; hexo -v<br>hexo-<span class="hljs-keyword">cli</span>: <span class="hljs-number">4.3</span><span class="hljs-number">.0</span><br><span class="hljs-symbol">os:</span> win32 <span class="hljs-number">10.0</span><span class="hljs-number">.19042</span><br><span class="hljs-symbol">node:</span> <span class="hljs-number">16.13</span><span class="hljs-number">.1</span><br><span class="hljs-symbol">v8:</span> <span class="hljs-number">9.4</span><span class="hljs-number">.146</span><span class="hljs-number">.24</span>-node<span class="hljs-number">.14</span><br><span class="hljs-symbol">uv:</span> <span class="hljs-number">1.42</span><span class="hljs-number">.0</span><br><span class="hljs-symbol">zlib:</span> <span class="hljs-number">1.2</span><span class="hljs-number">.11</span><br><span class="hljs-symbol">brotli:</span> <span class="hljs-number">1.0</span><span class="hljs-number">.9</span><br><span class="hljs-symbol">ares:</span> <span class="hljs-number">1.18</span><span class="hljs-number">.1</span><br><span class="hljs-symbol">modules:</span> <span class="hljs-number">93</span><br><span class="hljs-symbol">nghttp2:</span> <span class="hljs-number">1.45</span><span class="hljs-number">.1</span><br><span class="hljs-symbol">napi:</span> <span class="hljs-number">8</span><br><span class="hljs-symbol">llhttp:</span> <span class="hljs-number">6.0</span><span class="hljs-number">.4</span><br><span class="hljs-symbol">openssl:</span> <span class="hljs-number">1.1</span><span class="hljs-number">.1</span>l+quic<br><span class="hljs-symbol">cldr:</span> <span class="hljs-number">39.0</span><br><span class="hljs-symbol">icu:</span> <span class="hljs-number">69.1</span><br><span class="hljs-symbol">tz:</span> <span class="hljs-number">2021</span>a<br><span class="hljs-symbol">unicode:</span> <span class="hljs-number">13.0</span><br><span class="hljs-symbol">ngtcp2:</span> <span class="hljs-number">0.1</span><span class="hljs-number">.0</span>-DEV<br><span class="hljs-symbol">nghttp3:</span> <span class="hljs-number">0.1</span><span class="hljs-number">.0</span>-DEV<br></code></pre></td></tr></table></figure><p>输入指令出来结果代表环境安装顺利完成！</p><h2 id="二、搭建github仓库"><a href="#二、搭建github仓库" class="headerlink" title="二、搭建github仓库"></a>二、搭建github仓库</h2><p>新建一个github仓库，仓库名字和用户名字一致。</p><p><img src="https://github.com/iszhangyongxin/pictures/blob/main/2021-12/1638524756(1).jpg?raw=true" alt="新建github仓库"></p><p>格式如下：[owener name].github.io</p><h2 id="三、生成ssh公钥和私钥，配置到github仓库"><a href="#三、生成ssh公钥和私钥，配置到github仓库" class="headerlink" title="三、生成ssh公钥和私钥，配置到github仓库"></a>三、生成ssh公钥和私钥，配置到github仓库</h2><p>打开git bash,输入如下所示：</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs excel">ssh-keygen -<span class="hljs-built_in">t</span> rsa -C <span class="hljs-string">&quot;iszhangyongxin@163.com&quot;</span><br>ssh-keygen -<span class="hljs-built_in">t</span> rsa -C <span class="hljs-string">&quot;your email address&quot;</span><br></code></pre></td></tr></table></figure><p>敲回车4次。</p><p>打开 C:\Users\你的用户名\.ssh 文件夹</p><p>复制id_rsa.pub文件的内容。</p><p>接下来到github上面配置：</p><ol><li>访问github</li><li>点击setting</li><li>SSH and GPD keys</li><li>Add ssh key</li></ol><p><img src="https://github.com/iszhangyongxin/pictures/blob/main/2021-12/1638525541(1).jpg?raw=true" alt="github的setting"></p><p><img src="https://github.com/iszhangyongxin/pictures/blob/main/2021-12/1638525573(1).jpg?raw=true" alt="SSH and GPG keys"></p><p><img src="https://github.com/iszhangyongxin/pictures/blob/main/2021-12/1638525612(1).jpg?raw=true" alt="Add SSH key"></p><ol><li>测试是否绑定成功<br>打开git bash，输入<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">ssh -T <span class="hljs-symbol">git@</span>github.com<br></code></pre></td></tr></table></figure>如果结果为：”Hi xxxxx! You’ve successfully authenticated, but GitHub does not provide shell access.”<br>说明绑定成功。</li></ol><h2 id="四、本地跑你的博客"><a href="#四、本地跑你的博客" class="headerlink" title="四、本地跑你的博客"></a>四、本地跑你的博客</h2><ol><li><p>新建一个文件夹（我是在E盘新建blog）</p></li><li><p>在blog文件夹打开 git bash</p></li><li><p>输入”hexo init”<br>到这里完成Blog文件夹如下所示：<br><img src="https://github.com/iszhangyongxin/pictures/blob/main/2021-12/1638526209(1).jpg?raw=true" alt="Blog文件夹"></p></li><li><p>在git bash 输入 “hexo g”(generate), 再输入 “hexo s”(serve)。</p></li><li><p>访问 <a href="http://localhost:4000/">http://localhost:4000/</a> 就可以看到本地服务的页面了。</p></li><li><p>想把服务更新到github上面，首先修改你的  _config.yml  文件的deploy字段。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repository:</span> https:<span class="hljs-comment">//github.com/xxxx/xxx.github.io.git</span><br><span class="hljs-symbol">  branch:</span> main<br></code></pre></td></tr></table></figure></li><li><p>执行 hexo d,就可以部署成功。</p></li><li><p>最后，在执行hexo s 或者 hexo d时，先执行hexo clean清理项目。</p></li></ol><h2 id="五、附加"><a href="#五、附加" class="headerlink" title="五、附加"></a>五、附加</h2><blockquote><p>部署完以后<br>一般都是执行 hexo clean| hexo g | hexo s | hexo d</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
